local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/MlFrvWM/BBLT81/main/BL81827TC", true))()

local window = library:AddWindow("Sad v1.0.0 | Farming", {
    main_color = Color3.fromRGB(20, 82, 24),
    min_size = Vector2.new(550, 450),
    can_resize = false,
})

local tabFarming = window:AddTab("Farming")

local player = game.Players.LocalPlayer
local muscleEvent = player:WaitForChild("muscleEvent")
local runFastRep = false
local repsPerTick = 30

local RunService = game:GetService("RunService")

local function fastRepLoop()
    RunService.Heartbeat:Connect(function()
        if runFastRep then
            for i = 1, repsPerTick do
                muscleEvent:FireServer("rep")
            end
        end
    end)
end

fastRepLoop()

tabFarming:AddSwitch("Fast Rep", function(state)
    runFastRep = state
end)

local player = game.Players.LocalPlayer
local lighting = game:GetService("Lighting")

local currentColor = "White"

local colors = {
    ["Black"] = Color3.fromRGB(0, 0, 0),
    ["White"] = Color3.fromRGB(255, 255, 255),
    ["Blue"] = Color3.fromRGB(150, 180, 255),
    ["Red"] = Color3.fromRGB(255, 100, 100),
    ["Purple"] = Color3.fromRGB(180, 100, 255),
}

local function applyColor(colorName)
    local color = colors[colorName] or Color3.fromRGB(255,255,255)
    for _, v in pairs(lighting:GetChildren()) do
        if v:IsA("Sky") then
            v:Destroy()
        end
    end
    local simpleSky = Instance.new("Sky")
    simpleSky.Name = "SimpleSky"
    simpleSky.SkyboxBk = "rbxassetid://271042516"
    simpleSky.SkyboxDn = "rbxassetid://271077243"
    simpleSky.SkyboxFt = "rbxassetid://271042556"
    simpleSky.SkyboxLf = "rbxassetid://271042310"
    simpleSky.SkyboxRt = "rbxassetid://271042467"
    simpleSky.SkyboxUp = "rbxassetid://271079665"
    simpleSky.Parent = lighting
    lighting.Brightness = 2
    lighting.ClockTime = 14
    lighting.OutdoorAmbient = color
    lighting.Ambient = color
    lighting.FogColor = color
    lighting.FogEnd = 100000
end

local function restoreDefault()
    for _, v in pairs(lighting:GetChildren()) do
        if v:IsA("Sky") then
            v:Destroy()
        end
    end
    local defaultSky = Instance.new("Sky")
    defaultSky.SkyboxBk = "rbxassetid://271042516"
    defaultSky.SkyboxDn = "rbxassetid://271077243"
    defaultSky.SkyboxFt = "rbxassetid://271042556"
    defaultSky.SkyboxLf = "rbxassetid://271042310"
    defaultSky.SkyboxRt = "rbxassetid://271042467"
    defaultSky.SkyboxUp = "rbxassetid://271079665"
    defaultSky.Parent = lighting
    lighting.Brightness = 2
    lighting.ClockTime = "12:00:00"
    lighting.FogEnd = 100000
    lighting.Ambient = Color3.fromRGB(128,128,128)
    lighting.OutdoorAmbient = Color3.fromRGB(128,128,128)
end

local colorDropdown = tabFarming:AddDropdown("Anti Lag Color", function(value)
    currentColor = value
    applyColor(currentColor)
end)

colorDropdown:Add("Black")
colorDropdown:Add("White")
colorDropdown:Add("Blue")
colorDropdown:Add("Red")
colorDropdown:Add("Purple")

tabFarming:AddButton("Enable Anti Lag", function()
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("ParticleEmitter") or obj:IsA("Trail") then
            obj:Destroy()
        end
    end
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("PointLight") or obj:IsA("SpotLight") or obj:IsA("SurfaceLight") then
            obj:Destroy()
        end
    end
    applyColor(currentColor)
end)

tabFarming:AddButton("Disable Anti Lag", function()
    restoreDefault()
end)

tabFarming:AddSwitch("Hide All Frames", function(bool)
    local rSto = game:GetService("ReplicatedStorage")
    for _, obj in pairs(rSto:GetChildren()) do
        if obj.Name:match("Frame$") then
            obj.Visible = not bool
        end
    end
end)

local statsTab = window:AddTab("Stats")

local player = game.Players.LocalPlayer
local leaderstats = player:WaitForChild("leaderstats")
local strengthStat = leaderstats:WaitForChild("Strength")
local durabilityStat = player:WaitForChild("Durability")

local function formatNumber(number)
    local isNegative = number < 0
    number = math.abs(number)

    if number >= 1e15 then
        return (isNegative and "-" or "") .. string.format("%.2fQa", number / 1e15)
    elseif number >= 1e12 then
        return (isNegative and "-" or "") .. string.format("%.2fT", number / 1e12)
    elseif number >= 1e9 then
        return (isNegative and "-" or "") .. string.format("%.2fB", number / 1e9)
    elseif number >= 1e6 then
        return (isNegative and "-" or "") .. string.format("%.2fM", number / 1e6)
    elseif number >= 1e3 then
        return (isNegative and "-" or "") .. string.format("%.2fK", number / 1e3)
    else
        return (isNegative and "-" or "") .. string.format("%.2f", number)
    end
end

local timeLabel = statsTab:AddLabel("â±ï¸ Time:")
timeLabel.TextSize = 24

local stopwatchLabel = statsTab:AddLabel("0d 0h 0m 0s")
stopwatchLabel.TextSize = 20

statsTab:AddLabel("").TextSize = 10

local projectedLabel = statsTab:AddLabel("ðŸ“Š Projected Pace")
projectedLabel.TextSize = 24

local projectedStrengthLabel = statsTab:AddLabel("Strength Pace: 0 /Hour | 0 /Day")
projectedStrengthLabel.TextSize = 20

local projectedDurabilityLabel = statsTab:AddLabel("Durability Pace: 0 /Hour | 0 /Day")
projectedDurabilityLabel.TextSize = 20

statsTab:AddLabel("").TextSize = 10

local statsLabel = statsTab:AddLabel("ðŸ’ª Current Stats")
statsLabel.TextSize = 24

local strengthLabel = statsTab:AddLabel("Strength: 0 | Gained: 0")
strengthLabel.TextSize = 20

local durabilityLabel = statsTab:AddLabel("Durability: 0 | Gained: 0")
durabilityLabel.TextSize = 20

local startTime = tick()
local initialStrength = strengthStat.Value
local initialDurability = durabilityStat.Value

task.spawn(function()
    local lastUpdate = 0

    while true do
        local currentTime = tick()
        local elapsedTime = currentTime - startTime
        local days = math.floor(elapsedTime / (24 * 3600))
        local hours = math.floor((elapsedTime % (24 * 3600)) / 3600)
        local minutes = math.floor((elapsedTime % 3600) / 60)
        local seconds = math.floor(elapsedTime % 60)

        stopwatchLabel.Text = string.format("%dd %dh %dm %ds", days, hours, minutes, seconds)

        local currentStrength = strengthStat.Value
        local currentDurability = durabilityStat.Value

        local sessionStrengthDelta = currentStrength - initialStrength
        local sessionDurabilityDelta = currentDurability - initialDurability

        strengthLabel.Text = "Strength: " .. formatNumber(currentStrength) .. " | Gained: " .. formatNumber(sessionStrengthDelta)
        durabilityLabel.Text = "Durability: " .. formatNumber(currentDurability) .. " | Gained: " .. formatNumber(sessionDurabilityDelta)

        if currentTime - lastUpdate >= 6 then
            lastUpdate = currentTime

            local strengthPerSecond = sessionStrengthDelta / elapsedTime
            local durabilityPerSecond = sessionDurabilityDelta / elapsedTime

            local secondsPerHour = 3600
            local secondsPerDay = 86400

            local strengthPerHour = math.floor(strengthPerSecond * secondsPerHour)
            local durabilityPerHour = math.floor(durabilityPerSecond * secondsPerHour)

            local projectedStrength = math.floor(strengthPerSecond * secondsPerDay)
            local projectedDurability = math.floor(durabilityPerSecond * secondsPerDay)

            projectedStrengthLabel.Text = "Strength Pace: " .. formatNumber(strengthPerHour) .. "/Hour | " .. formatNumber(projectedStrength) .. "/Day"
            projectedDurabilityLabel.Text = "Durability Pace: " .. formatNumber(durabilityPerHour) .. "/Hour | " .. formatNumber(projectedDurability) .. "/Day"
        end
        task.wait(0.05)
    end
end)
